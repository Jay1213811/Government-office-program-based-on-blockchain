* 标记为可选可不选 [*号数据区块链不存] 
user: 
// 用户表，村民ID对应身份mysql和区块链一样
id index 
*username varchar//微信名
name varchar //真名
id_cardHash varchar // 身份证敏感信息脱敏存hash 
score integer  // 积分（默认100分）
* phone_number varchar 
// 下面的数据主要是后端数据库存的。
passwordHash sha256  // 密码，区块链也好mysql也好都是存hash。用户输入密码如123.通过sha256（123）==sha256（passwordHash ）
*privkey text // 私钥
*address text // 地址
usertype    int//用户身份类别0农民1议员2检察员
primay_key(id)  

proposal: 
// 需求表, 记录村民的动作，在什么时间提了什么需求。 
proposal_index index  // 唯一下标 
timestamp date //什么时间发送的需求
user_id index //谁发的哪个用户
detail text // 提出的需求信息 
approve_cnt integer // 赞成的数量 
disapprove_cnt integer // 议员反对的数量 
is_approved string（或者bool也行） // 最初的只反映通过/未通过那如果还在审核如投票人数不够多显示就不对了。现在默认
是审核中，然后赞成的数量 >1/2通过否则不通过。用string就是审核中/通过/不通过。bool就0代表审核中1通过2不通过，看你自己

primay_key(proposal_index )  

report:
// 反馈表。无需审核简单点，直接在某一栏页面直接展示XX农民说XX农民做了好事/坏事，起到了监督作用
id index
people_id integer // 村民的主键
timestamp date
to_userid   integer  //反馈的村民的ID
great_or_bad bool // 是好人好事还是举报坏事
detail text  // 反馈的信息



councillor_action: 
// 议员动作表，在什么时候给哪个农民的提议投了票。【后端的业务逻辑，这个区块链不搞，区块链只做展示记录哪些提议通过/被拒绝了留下记录，便于追溯】
user_id index //哪个议员
timestamp date //什么时间
proposal_index integer //对哪一项提议
approve bool //支持还是反对
disapprove bool 
primary_key(councillor_id, proposal_index)  

//具体功能
1.注册功能  ID自动生成的采用递增或者随机数的方式保障不重复即可。
输入：微信名（自动获取不用输）+真名+身份证（存的时候做hash运算）+电话+密码（存的时候做hash运算）+身份类别（小程序做一个下拉框选择）
2.登陆
3.根据用户身份判断可以调用的方法，用require 鉴权。
// 根据detail 信息创建一个proposal（会返回proposal_id）
function createProposal(detail text){}
// 创建一个举报信息
function createBadReport(to address, detail text) {}
// 创建一个好人好事的反馈
function createGreatReport(detail text) {}
// 给指定的议案投票（这个区块链不做，后端的业务逻辑）
function voteProposal(proposal_id number, vote bool) {}
//所有用户都有的功能。1.会有一页展示已经通过/拒绝的提案，也就是已经审核完了的.
//农民提出了提案就有了一个proposal_id，输入后就可以随时查看进度
function checkProposal(proposal_id){}
// 如果有人乱提案或者乱举报或者乱反馈好人好事，检察员可以去扣他的分。输入用户ID+分值扣除相应的分，分值低于0就不让他登陆或者别的处罚
function banSomeone(user_id,grade) {}、








